{"ast":null,"code":"'use strict';\n\nimport transformData from './transformData.js';\nimport isCancel from '../cancel/isCancel.js';\nimport defaults from '../defaults/index.js';\nimport CanceledError from '../cancel/CanceledError.js';\nimport AxiosHeaders from '../core/AxiosHeaders.js';\n/**\r\n * Throws a `CanceledError` if cancellation has been requested.\r\n *\r\n * @param {Object} config The config that is to be used for the request\r\n *\r\n * @returns {void}\r\n */\n\nfunction throwIfCancellationRequested(config) {\n  if (config.cancelToken) {\n    config.cancelToken.throwIfRequested();\n  }\n\n  if (config.signal && config.signal.aborted) {\n    throw new CanceledError();\n  }\n}\n/**\r\n * Dispatch a request to the server using the configured adapter.\r\n *\r\n * @param {object} config The config that is to be used for the request\r\n *\r\n * @returns {Promise} The Promise to be fulfilled\r\n */\n\n\nexport default function dispatchRequest(config) {\n  throwIfCancellationRequested(config);\n  config.headers = AxiosHeaders.from(config.headers); // Transform request data\n\n  config.data = transformData.call(config, config.transformRequest);\n  const adapter = config.adapter || defaults.adapter;\n  return adapter(config).then(function onAdapterResolution(response) {\n    throwIfCancellationRequested(config); // Transform response data\n\n    response.data = transformData.call(config, config.transformResponse, response);\n    response.headers = AxiosHeaders.from(response.headers);\n    return response;\n  }, function onAdapterRejection(reason) {\n    if (!isCancel(reason)) {\n      throwIfCancellationRequested(config); // Transform response data\n\n      if (reason && reason.response) {\n        reason.response.data = transformData.call(config, config.transformResponse, reason.response);\n        reason.response.headers = AxiosHeaders.from(reason.response.headers);\n      }\n    }\n\n    return Promise.reject(reason);\n  });\n}","map":{"version":3,"sources":["C:/Users/ASUS/Downloads/pe/Tubes-Webpro-AIMBOT/frontend/node_modules/axios/lib/core/dispatchRequest.js"],"names":["transformData","isCancel","defaults","CanceledError","AxiosHeaders","throwIfCancellationRequested","config","cancelToken","throwIfRequested","signal","aborted","dispatchRequest","headers","from","data","call","transformRequest","adapter","then","onAdapterResolution","response","transformResponse","onAdapterRejection","reason","Promise","reject"],"mappings":"AAAA;;AAEA,OAAOA,aAAP,MAA0B,oBAA1B;AACA,OAAOC,QAAP,MAAqB,uBAArB;AACA,OAAOC,QAAP,MAAqB,sBAArB;AACA,OAAOC,aAAP,MAA0B,4BAA1B;AACA,OAAOC,YAAP,MAAyB,yBAAzB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,4BAAT,CAAsCC,MAAtC,EAA8C;AAC5C,MAAIA,MAAM,CAACC,WAAX,EAAwB;AACtBD,IAAAA,MAAM,CAACC,WAAP,CAAmBC,gBAAnB;AACD;;AAED,MAAIF,MAAM,CAACG,MAAP,IAAiBH,MAAM,CAACG,MAAP,CAAcC,OAAnC,EAA4C;AAC1C,UAAM,IAAIP,aAAJ,EAAN;AACD;AACF;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,eAAe,SAASQ,eAAT,CAAyBL,MAAzB,EAAiC;AAC9CD,EAAAA,4BAA4B,CAACC,MAAD,CAA5B;AAEAA,EAAAA,MAAM,CAACM,OAAP,GAAiBR,YAAY,CAACS,IAAb,CAAkBP,MAAM,CAACM,OAAzB,CAAjB,CAH8C,CAK9C;;AACAN,EAAAA,MAAM,CAACQ,IAAP,GAAcd,aAAa,CAACe,IAAd,CACZT,MADY,EAEZA,MAAM,CAACU,gBAFK,CAAd;AAKA,QAAMC,OAAO,GAAGX,MAAM,CAACW,OAAP,IAAkBf,QAAQ,CAACe,OAA3C;AAEA,SAAOA,OAAO,CAACX,MAAD,CAAP,CAAgBY,IAAhB,CAAqB,SAASC,mBAAT,CAA6BC,QAA7B,EAAuC;AACjEf,IAAAA,4BAA4B,CAACC,MAAD,CAA5B,CADiE,CAGjE;;AACAc,IAAAA,QAAQ,CAACN,IAAT,GAAgBd,aAAa,CAACe,IAAd,CACdT,MADc,EAEdA,MAAM,CAACe,iBAFO,EAGdD,QAHc,CAAhB;AAMAA,IAAAA,QAAQ,CAACR,OAAT,GAAmBR,YAAY,CAACS,IAAb,CAAkBO,QAAQ,CAACR,OAA3B,CAAnB;AAEA,WAAOQ,QAAP;AACD,GAbM,EAaJ,SAASE,kBAAT,CAA4BC,MAA5B,EAAoC;AACrC,QAAI,CAACtB,QAAQ,CAACsB,MAAD,CAAb,EAAuB;AACrBlB,MAAAA,4BAA4B,CAACC,MAAD,CAA5B,CADqB,CAGrB;;AACA,UAAIiB,MAAM,IAAIA,MAAM,CAACH,QAArB,EAA+B;AAC7BG,QAAAA,MAAM,CAACH,QAAP,CAAgBN,IAAhB,GAAuBd,aAAa,CAACe,IAAd,CACrBT,MADqB,EAErBA,MAAM,CAACe,iBAFc,EAGrBE,MAAM,CAACH,QAHc,CAAvB;AAKAG,QAAAA,MAAM,CAACH,QAAP,CAAgBR,OAAhB,GAA0BR,YAAY,CAACS,IAAb,CAAkBU,MAAM,CAACH,QAAP,CAAgBR,OAAlC,CAA1B;AACD;AACF;;AAED,WAAOY,OAAO,CAACC,MAAR,CAAeF,MAAf,CAAP;AACD,GA7BM,CAAP;AA8BD","sourcesContent":["'use strict';\r\n\r\nimport transformData from './transformData.js';\r\nimport isCancel from '../cancel/isCancel.js';\r\nimport defaults from '../defaults/index.js';\r\nimport CanceledError from '../cancel/CanceledError.js';\r\nimport AxiosHeaders from '../core/AxiosHeaders.js';\r\n\r\n/**\r\n * Throws a `CanceledError` if cancellation has been requested.\r\n *\r\n * @param {Object} config The config that is to be used for the request\r\n *\r\n * @returns {void}\r\n */\r\nfunction throwIfCancellationRequested(config) {\r\n  if (config.cancelToken) {\r\n    config.cancelToken.throwIfRequested();\r\n  }\r\n\r\n  if (config.signal && config.signal.aborted) {\r\n    throw new CanceledError();\r\n  }\r\n}\r\n\r\n/**\r\n * Dispatch a request to the server using the configured adapter.\r\n *\r\n * @param {object} config The config that is to be used for the request\r\n *\r\n * @returns {Promise} The Promise to be fulfilled\r\n */\r\nexport default function dispatchRequest(config) {\r\n  throwIfCancellationRequested(config);\r\n\r\n  config.headers = AxiosHeaders.from(config.headers);\r\n\r\n  // Transform request data\r\n  config.data = transformData.call(\r\n    config,\r\n    config.transformRequest\r\n  );\r\n\r\n  const adapter = config.adapter || defaults.adapter;\r\n\r\n  return adapter(config).then(function onAdapterResolution(response) {\r\n    throwIfCancellationRequested(config);\r\n\r\n    // Transform response data\r\n    response.data = transformData.call(\r\n      config,\r\n      config.transformResponse,\r\n      response\r\n    );\r\n\r\n    response.headers = AxiosHeaders.from(response.headers);\r\n\r\n    return response;\r\n  }, function onAdapterRejection(reason) {\r\n    if (!isCancel(reason)) {\r\n      throwIfCancellationRequested(config);\r\n\r\n      // Transform response data\r\n      if (reason && reason.response) {\r\n        reason.response.data = transformData.call(\r\n          config,\r\n          config.transformResponse,\r\n          reason.response\r\n        );\r\n        reason.response.headers = AxiosHeaders.from(reason.response.headers);\r\n      }\r\n    }\r\n\r\n    return Promise.reject(reason);\r\n  });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}