{"ast":null,"code":"class Form {\n  /**\n   * Validate Login\n   * @param str\n   * @returns boolean\n   */\n  static validEmail(str) {\n    let regex = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;\n    return regex.test(str);\n  }\n  /**\n   * Minimum length of string\n   * @param str\n   * @param length\n   * @returns\n   */\n\n\n  static minLength(str, length) {\n    let isInvalid = false;\n\n    if (str.length < length) {\n      isInvalid = true;\n    }\n\n    return isInvalid;\n  }\n  /**\n   * Form Validator\n   * @param  obj\n   * @returns\n   */\n\n\n  static validator(obj) {\n    let keys = Object.entries(obj);\n    let results = [];\n    let validations = null;\n    keys.map(key => {\n      if (\"isRequired\" in key[1] && key[1].isRequired) {\n        if (key[1].value.length === 0) {\n          results.push({\n            [key[0]]: [`The ${key[0]} is required.`]\n          });\n        } else {\n          if (\"isEmail\" in key[1] && key[1].isEmail) {\n            let isValidEmail = Form.validEmail(key[1].value);\n\n            if (!isValidEmail) {\n              results.push({\n                [key[0]]: [`The ${key[0]} must be valid email.`]\n              });\n            }\n          }\n\n          if (\"minLength\" in key[1] && Form.minLength(key[1].value, key[1].minLength)) {\n            results.push({\n              [key[0]]: [`The ${key[0]} must at least ${key[1].minLength} characters.`]\n            });\n          }\n        }\n      } else if (\"isEmail\" in key[1]) {\n        let isValidEmail = Form.validEmail(key[1].value);\n\n        if (!isValidEmail) {\n          results.push({\n            [key[0]]: [`The ${key[0]} must be valid email`]\n          });\n        }\n      } else if (\"minLength\" in key[1] && Form.minLength(key[1].value, key[1].minLength)) {\n        results.push({\n          [key[0]]: [`The ${key[0]} must at least ${key[1].minLength} characters.`]\n        });\n      }\n\n      return results;\n    });\n    results = Object.assign({}, ...results.map(result => result));\n\n    if (Object.keys(results).length > 0) {\n      validations = {\n        errors: results\n      };\n    } else {\n      validations = null;\n    }\n\n    return validations;\n  }\n\n}\n\nexport default Form;","map":{"version":3,"sources":["/home/ryan/Tubes-Webpro-AIMBOT/src/Components/Forms.js"],"names":["Form","validEmail","str","regex","test","minLength","length","isInvalid","validator","obj","keys","Object","entries","results","validations","map","key","isRequired","value","push","isEmail","isValidEmail","assign","result","errors"],"mappings":"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","sourcesContent":["class Form {\n    /**\n     * Validate Login\n     * @param str\n     * @returns boolean\n     */\n    static validEmail(str) {\n      let regex =\n        /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;\n      return regex.test(str);\n    }\n  \n    /**\n     * Minimum length of string\n     * @param str\n     * @param length\n     * @returns\n     */\n    static minLength(str, length) {\n      let isInvalid = false;\n  \n      if (str.length < length) {\n        isInvalid = true;\n      }\n  \n      return isInvalid;\n    }\n  \n    /**\n     * Form Validator\n     * @param  obj\n     * @returns\n     */\n    static validator(obj) {\n      let keys = Object.entries(obj);\n      let results = [];\n      let validations = null;\n  \n      keys.map((key) => {\n        if (\"isRequired\" in key[1] && key[1].isRequired) {\n          if (key[1].value.length === 0) {\n            results.push({\n              [key[0]]: [`The ${key[0]} is required.`],\n            });\n          } else {\n            if (\"isEmail\" in key[1] && key[1].isEmail) {\n              let isValidEmail = Form.validEmail(key[1].value);\n  \n              if (!isValidEmail) {\n                results.push({\n                  [key[0]]: [`The ${key[0]} must be valid email.`],\n                });\n              }\n            }\n  \n            if (\n              \"minLength\" in key[1] &&\n              Form.minLength(key[1].value, key[1].minLength)\n            ) {\n              results.push({\n                [key[0]]: [\n                  `The ${key[0]} must at least ${key[1].minLength} characters.`,\n                ],\n              });\n            }\n          }\n        } else if (\"isEmail\" in key[1]) {\n          let isValidEmail = Form.validEmail(key[1].value);\n  \n          if (!isValidEmail) {\n            results.push({\n              [key[0]]: [`The ${key[0]} must be valid email`],\n            });\n          }\n        } else if (\n          \"minLength\" in key[1] &&\n          Form.minLength(key[1].value, key[1].minLength)\n        ) {\n          results.push({\n            [key[0]]: [\n              `The ${key[0]} must at least ${key[1].minLength} characters.`,\n            ],\n          });\n        }\n        return results;\n      });\n  \n      results = Object.assign({}, ...results.map((result) => result));\n  \n      if (Object.keys(results).length > 0) {\n        validations = {\n          errors: results,\n        };\n      } else {\n        validations = null;\n      }\n  \n      return validations;\n    }\n  }\n  \n  export default Form;\n  "]},"metadata":{},"sourceType":"module"}